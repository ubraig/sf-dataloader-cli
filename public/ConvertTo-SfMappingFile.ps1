Set-StrictMode -Version 3

function ConvertTo-SfMappingFile {
<# 
    .SYNOPSIS 
    Takes a list (array) of field names and converts to a default field mapping in a .sdl mapping file.

    .DESCRIPTION
    Each UPDATE, INSERT, UPSERT operation requires a .sdl mapping file that maps the field name (column header) of
    the .csv file to the API name of the field in the target org.
    In cases where the field names in the .csv are same as the API names, i.e. where a 1:1 mapping is needed,
    such mapping can be created automatically by this command. See examples.

    Field names with a prefix of '#' will be included in the .sdl and, by definition, are treated as comment line.

    The dot notation in field names from child-to-parent relationships queries will be converted as
    required by .sdl syntax, e.g. 'MyCustomLookup__r.Name' will be converted to 'MyCustomLookup__r\:Name'.

    .EXAMPLE
    PS>$MyContactFields = @('Id', '#FirstName', 'LastName', 'Account.Name', 'MyCustomField__c')
    PS>ConvertTo-SfMappingFile $MyContactFields MyContactMapping.sdl

    Will result to a mapping file 'MyContactMapping.sdl' that looks like
      Id=Id
      #FirstName=#FirstName
      LastName=LastName
      Account.Name=Account\:Name
      MyCustomField__c=MyCustomField__c

    .LINK
    Get-SfFieldNames
    Online version: https://github.com/ubraig/sf-dataloader-cli/wiki


#>
    [CmdletBinding(HelpURI="https://github.com/ubraig/sf-dataloader-cli/wiki")]
    param (
        # List of field names as PowerShell string array, e.g. @('Id', 'FirstName', 'LastName').
        [Parameter(Mandatory, Position = 0)]
        [string[]]$Fields,

        # Path to the '.sdl' mapping file to be created.
        [Parameter(Mandatory, Position = 1)]
        [string]$Path
    )

    # -------------------------------------------------------------- some ugly magic to get the common parameter debug
    $debug = $false
    if ( $PSBoundParameters.containskey(“debug”) ) {
        if ( $debug = [bool]$PSBoundParameters.item(“debug”) ) { 
            $DebugPreference = “Continue”
        }
    }
    Write-Debug "Debug-Mode: $debug"

    # -------------------------------------------------------------- build default '.sdl' mapping file
    $MappingFileContent = @('# mapping file generated by ConvertTo-SfMappingFile')
    foreach ($Field in $Fields) {
        $TargetField = $Field.Replace('.', '\:')
        $MappingFileContent += "$Field=$TargetField"
    }
    Set-Content $Path $MappingFileContent
    $Path = Resolve-Path $Path
    return $Path
}
